#!/usr/bin/env bash

SCRIPT_NAME="$0"

declare -a TARGET_NODES=()

OUTPUT_VIRSH_LIST=

REGEX_DOMAIN='dev\-(controller|compute|cinder|swift|storage)[0-9]+'

log_info() {
    echo "$(date) - INFO: $1"
}
log_err() {
    echo "$(date) - ERROR: $1" >&2
}

main() {
    local sub_command="$1"
    local arg="$2"

    if [ -z "$sub_command" ]; then
        usage
        return 0
    fi

    init_target_nodes || return 1

    #if [[ "${sub_command}" =~ ^(start|destroy|snapshot-list|snapshot-create-as|snapshot-delete)$ ]]; then
    if [ "${sub_command}" = "start" -o "${sub_command}" = "destroy" -o "${sub_command}" = list -o "${sub_command}" = "snapshot-list" ]; then
        # Empty arg to ignore it
        arg=
    elif [ "${sub_command}" = "snapshot-delete" -o "${sub_command}" = "snapshot-revert" ]; then
        [ -z "$arg" ] && {
            log_err "sub_command \"snapshot-create-as\" and \"snapshot-delete\" requires additional arg \"<snapshot-name>\""
            return 1
        }
    elif [ "${sub_command}" = "snapshot-create-as" ]; then
        # sub_command "snapshot-create-as" does not require arg. But if it was not existed, this command will create a snapshot with name that based epoch dates.
        true
    else
        log_err "Unknown sub command for virsh (sub_command=${sub_command})."
        return 1
    fi

    execute_virsh "${sub_command}" "${arg}"
}

execute_virsh() {
    local sub_command="$1";   shift
    local target_object="$1"; shift
    local options="$@"

    if [ "$sub_command" = "snapshot-list" ]; then
        options="--tree"
        TARGET_NODES=(${TARGET_NODES[0]})
    fi

    if [ "$sub_command" = "list" ]; then
        head -n 2 <<< "${OUTPUT_VIRSH_LIST}"
        grep -P "${REGEX_DOMAIN}" <<< "${OUTPUT_VIRSH_LIST}"
    else
        for instance in ${TARGET_NODES[@]}; do
            log_info "Execute command: virsh "${sub_command}" ${options} ${instance} ${target_object}"
            virsh "${sub_command}" ${options} ${instance} ${target_object}
        done
    fi
}

init_target_nodes() {
    OUTPUT_VIRSH_LIST="$(virsh list --all)"
    IFS=$'\n' TARGET_NODES=($(echo "${OUTPUT_VIRSH_LIST}" | tail -n +3 | awk '{print $2}' | grep -P "${REGEX_DOMAIN}"))

    [ ${#TARGET_NODES[@]} -eq 0 ] && {
        log_err "There are no VM nodes to execute a command, dev-controllerXX, dev-computesXX or dev-storageXX etc."
        return 1
    }
    return 0
}

usage() {
    cat << EOF
This is a script for KVM instances that are used for OpenStack dev environment.
This script will execute command to all of them at all once for example start, stop(destroy), snapshot-create-as or snapshot-delete etc.

ex)
  ${SCRIPT_NAME} start
  ${SCRIPT_NAME} destroy
  ${SCRIPT_NAME} list
  ${SCRIPT_NAME} snapshot-list    # It will list snapshot only in a controller node on behalf of all other nodes.
  ${SCRIPT_NAME} snapshot-create-as \${snapshot_name}
  ${SCRIPT_NAME} snapshot-delete \${snapshot_name}
  ${SCRIPT_NAME} snapshot-snapshot-revert \${snapshot_name}
EOF
}

main "$@"
